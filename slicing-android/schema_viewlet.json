{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "JSON app: viewlet component schema",
  "description": "Defines the available viewlet components for the JSON framework",
  "type": "object",
  "properties": {
    "viewlet": {
      "description": "The viewlet type, a view component",
      "type": "string",
      "enum": [
        "image",
        "imageButton",
        "text",
        "view",
        "frameContainer",
        "gameContainer",
        "linearContainer",
        "pageContainer",
        "level",
        "levelCanvas",
        "levelSlicePreview",
        "gameTitleBar",
        "simpleBottomBar"
      ]
    },
    "refId": {
      "description": "A unique identifier, used to refer to the viewlet from the source code",
      "type": "string"
    },
    "width": {
      "description": "The width of the view, determined by layout or with a fixed size",
      "$ref": "#/definitions/layoutDimension"
    },
    "height": {
      "description": "The height of the view, determined by layout or with a fixed size",
      "$ref": "#/definitions/layoutDimension"
    },
    "minWidth": {
      "description": "The minimum width of the view",
      "$ref": "#/definitions/dimension"
    },
    "maxWidth": {
      "description": "The maximum width of the view",
      "$ref": "#/definitions/dimension"
    },
    "minHeight": {
      "description": "The minimum height of the view",
      "$ref": "#/definitions/dimension"
    },
    "maxHeight": {
      "description": "The maximum height of the view",
      "$ref": "#/definitions/dimension"
    },
    "weight": {
      "description": "The weight of the view, used to evenly place items in the remaining space of a linear container",
      "type": "number"
    },
    "padding": {
      "description": "A list of padding values in the order of left, top, right and bottom",
      "type": "array",
      "minItems": 4,
      "maxItems": 4,
      "items": {
        "$ref": "#/definitions/dimension"
      }
    },
    "paddingLeft": {
      "description": "The left padding inside the view",
      "$ref": "#/definitions/dimension"
    },
    "paddingTop": {
      "description": "The top padding inside the view",
      "$ref": "#/definitions/dimension"
    },
    "paddingRight": {
      "description": "The right padding inside the view",
      "$ref": "#/definitions/dimension"
    },
    "paddingBottom": {
      "description": "The bottom padding inside the view",
      "$ref": "#/definitions/dimension"
    },
    "margin": {
      "description": "A list of margin values in the order of left, top, right and bottom",
      "type": "array",
      "minItems": 4,
      "maxItems": 4,
      "items": {
        "$ref": "#/definitions/dimension"
      }
    },
    "marginLeft": {
      "description": "The left margin of the view",
      "$ref": "#/definitions/dimension"
    },
    "marginTop": {
      "description": "The top margin of the view",
      "$ref": "#/definitions/dimension"
    },
    "marginRight": {
      "description": "The right margin of the view",
      "$ref": "#/definitions/dimension"
    },
    "marginBottom": {
      "description": "The bottom margin of the view",
      "$ref": "#/definitions/dimension"
    },
    "marginSpacing": {
      "description": "The margin to the top or left of the view if it's not the first visible item in a linear container",
      "$ref": "#/definitions/dimension"
    },
    "gravity": {
      "description": "The gravity is the alignment to position a view within its container",
      "$ref": "#/definitions/gravity"
    },
    "horizontalGravity": {
      "description": "The gravity is the alignment to position a view within its container",
      "$ref": "#/definitions/horizontalGravity"
    },
    "verticalGravity": {
      "description": "The gravity is the alignment to position a view within its container",
      "$ref": "#/definitions/verticalGravity"
    },
    "visibility": {
      "description": "Determines the visibility of the view",
      "type": "string",
      "enum": [
        "visible",
        "hidden",
        "invisible"
      ],
      "default": "visible"
    },
    "backgroundColor": {
      "description": "The color behind the content of the view",
      "$ref": "#/definitions/color"
    },
    "recycling": {
      "description": "Recycle or replace sub items on refresh",
      "type": "boolean"
    }
  },
  "required": [
    "viewlet"
  ],
  "anyOf": [
    {
      "if": {
        "properties": {
          "viewlet": {
            "const": "image"
          }
        }
      },
      "then": {
        "properties": {
          "source": {
            "description": "The source to retrieve the image from",
            "$ref": "#/definitions/imageSource"
          },
          "stretchType": {
            "description": "Determines how the image is stretched within its frame",
            "type": "string",
            "enum": [
              "none",
              "fill",
              "aspectFit",
              "aspectCrop"
            ],
            "default": "none"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "viewlet": {
            "const": "imageButton"
          }
        }
      },
      "then": {
        "properties": {
          "source": {
            "description": "The source to retrieve the image from",
            "$ref": "#/definitions/imageSource"
          },
          "highlightedSource": {
            "description": "An alternative image source for the highlighted state",
            "$ref": "#/definitions/imageSource"
          },
          "disabledSource": {
            "description": "An alternative image source for the disabled state",
            "$ref": "#/definitions/imageSource"
          },
          "stretchType": {
            "description": "Determines how the image is stretched within its frame",
            "type": "string",
            "enum": [
              "none",
              "fill",
              "aspectFit",
              "aspectCrop"
            ],
            "default": "none"
          },
          "tapEvent": {
            "description": "Sends event when the button is tapped",
            "$ref": "#/definitions/appEvent"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "viewlet": {
            "const": "text"
          }
        }
      },
      "then": {
        "properties": {
          "localizedText": {
            "description": "The localized string key of the text",
            "type": "string"
          },
          "text": {
            "description": "The text",
            "type": "string"
          },
          "textColor": {
            "description": "The color of the text",
            "$ref": "#/definitions/color"
          },
          "textSize": {
            "description": "The size of the text",
            "$ref": "#/definitions/dimension"
          },
          "font": {
            "description": "The font of the text",
            "type": "string",
            "enum": [
              "normal",
              "italics",
              "bold",
              "boldItalics"
            ],
            "default": "normal"
          },
          "maxLines": {
            "description": "The maximum amount of lines of the text, 0 = no limitation",
            "type": "integer",
            "default": 0
          },
          "textAlignment": {
            "description": "The horizontal alignment of the text within its frame",
            "type": "string",
            "enum": [
              "left",
              "right",
              "center"
            ],
            "default": "left"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "viewlet": {
            "const": "frameContainer"
          }
        }
      },
      "then": {
        "properties": {
          "items": {
            "description": "A list of viewlets in a container component",
            "type": "array",
            "items": {
              "$ref": "#"
            },
            "default": []
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "viewlet": {
            "const": "gameContainer"
          }
        }
      },
      "then": {
        "properties": {
          "levelWidth": {
            "description": "The width of the level in pixel independent units",
            "type": "number"
          },
          "levelHeight": {
            "description": "The height of the level in pixel independent units",
            "type": "number"
          },
          "backgroundImage": {
            "description": "The image to reveal behind the level canvas",
            "$ref": "#/definitions/imageSource"
          },
          "requireClearRate": {
            "description": "The clear rate required to complete the level",
            "type": "integer"
          },
          "clearEvent": {
            "description": "Sends event when the level is cleared",
            "$ref": "#/definitions/appEvent"
          },
          "slices": {
            "description": "A flattened list of slice vector coordinates",
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "viewlet": {
            "const": "linearContainer"
          }
        }
      },
      "then": {
        "properties": {
          "orientation": {
            "description": "The layout direction of the items in the container",
            "type": "string",
            "enum": [
              "horizontal",
              "vertical"
            ]
          },
          "items": {
            "description": "A list of viewlets in a container component",
            "type": "array",
            "items": {
              "$ref": "#"
            },
            "default": []
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "viewlet": {
            "const": "pageContainer"
          }
        }
      },
      "then": {
        "properties": {
          "titleBar": {
            "description": "The title bar view at the top of the screen",
            "$ref": "#"
          },
          "bottomBar": {
            "description": "Takes up the space of the bottom navigation bar on Android or the bottom safe area on iOS",
            "$ref": "#"
          },
          "contentItems": {
            "description": "A list of viewlets within the safe area",
            "type": "array",
            "items": {
              "$ref": "#"
            },
            "default": []
          },
          "backgroundItem": {
            "description": "A background view that's behind the content items and ignores the safe area",
            "$ref": "#"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "viewlet": {
            "const": "level"
          }
        }
      },
      "then": {
        "properties": {
          "levelWidth": {
            "description": "The width of the level in pixel independent units",
            "type": "number"
          },
          "levelHeight": {
            "description": "The height of the level in pixel independent units",
            "type": "number"
          },
          "backgroundImage": {
            "description": "The image to reveal behind the level canvas",
            "$ref": "#/definitions/imageSource"
          },
          "requireClearRate": {
            "description": "The clear rate required to complete the level",
            "type": "integer"
          },
          "slices": {
            "description": "A flattened list of slice vector coordinates",
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "viewlet": {
            "const": "levelCanvas"
          }
        }
      },
      "then": {
        "properties": {
          "canvasWidth": {
            "description": "The width in pixel independent canvas units",
            "type": "number"
          },
          "canvasHeight": {
            "description": "The height in pixel independent canvas units",
            "type": "number"
          },
          "slices": {
            "description": "A flattened list of slice vector coordinates",
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "viewlet": {
            "const": "levelSlicePreview"
          }
        }
      },
      "then": {
        "properties": {
          "start": {
            "description": "A list with an x and y coordinate starting the slice",
            "type": "array",
            "items": {
              "$ref": "#/definitions/dimension"
            }
          },
          "end": {
            "description": "A list with an x and y coordinate ending the slice",
            "type": "array",
            "items": {
              "$ref": "#/definitions/dimension"
            }
          },
          "color": {
            "description": "The color of the slice preview",
            "$ref": "#/definitions/color"
          },
          "stretchedColor": {
            "description": "The color of the stretched slice extending to the component edges",
            "$ref": "#/definitions/color"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "viewlet": {
            "const": "gameTitleBar"
          }
        }
      },
      "then": {
        "properties": {
          "localizedTitle": {
            "description": "The localized string key of the title",
            "type": "string"
          },
          "title": {
            "description": "The bar title",
            "type": "string"
          },
          "showDivider": {
            "description": "Set visibility of the divider between the bar and the rest of the content",
            "type": "boolean"
          }
        }
      }
    }
  ],
  "definitions": {
    "layoutDimension": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "stretchToParent",
            "fitContent"
          ]
        },
        {
          "type": "string",
          "pattern": "^\\$.+$"
        },
        {
          "type": "number"
        },
        {
          "type": "string",
          "pattern": "^-?\\d*\\.?\\d+(dp|sp|px|wp|hp|vw|vh|maxp|minp|vmin|vmax)$"
        }
      ]
    },
    "dimension": {
      "oneOf": [
        {
          "type": "string",
          "pattern": "^\\$.+$"
        },
        {
          "type": "number"
        },
        {
          "type": "string",
          "pattern": "^-?\\d*\\.?\\d+(dp|sp|px|wp|hp|vw|vh|maxp|minp|vmin|vmax)$"
        }
      ]
    },
    "color": {
      "oneOf": [
        {
          "type": "string",
          "pattern": "^\\$.+$"
        },
        {
          "type": "string",
          "pattern": "^#([0-9a-fA-F]{3}|[0-9a-fA-F]{4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$"
        },
        {
          "type": "string",
          "pattern": "^([hH])\\d+\\s*(([sS])\\d+)?\\s*(([vV])\\d+)?\\s*(([lL])\\d+)?\\s*(([aA])\\d+)?\\s*$"
        }
      ]
    },
    "gravity": {
      "type": "string",
      "enum": [
        "left",
        "right",
        "top",
        "bottom",
        "center",
        "centerHorizontal",
        "centerVertical"
      ]
    },
    "horizontalGravity": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "left",
            "center",
            "right"
          ]
        },
        {
          "type": "number"
        }
      ]
    },
    "verticalGravity": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "top",
            "center",
            "bottom"
          ]
        },
        {
          "type": "number"
        }
      ]
    },
    "imageSource": {
      "oneOf": [
        {
          "type": "string",
          "pattern": "^(app|http|https):\/\/.+$"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "description": "The type of image source to load",
              "type": "string",
              "enum": [
                "app",
                "http",
                "https"
              ]
            },
            "name": {
              "description": "The filename of the image",
              "type": "string"
            },
            "forceWidth": {
              "description": "Online images only: scale the image to this width",
              "$ref": "#/definitions/dimension"
            },
            "forceHeight": {
              "description": "Online images only: scale the image to this height",
              "$ref": "#/definitions/dimension"
            },
            "density": {
              "description": "Online images only: the image has this density, scale up/down for devices with another density",
              "type": "number"
            }
          }
        }
      ]
    },
    "appEvent": {
      "oneOf": [
        {
          "type": "string",
          "pattern": "^(alert):\/\/.+$"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "description": "The type of event",
              "type": "string",
              "enum": [
                "alert"
              ]
            },
            "name": {
              "description": "The name or subtype of the event",
              "type": "string"
            }
          }
        }
      ]
    }
  }
}
